This is a comprehensive list of all the operators you have in the C language. In this list, I’m indicating the
following:

(binary) The operator has a left and right: X + Y.
(unary) The operator is on its own: -X.
(preﬁx) The operator comes before the variable: ++X.
(postﬁx) Usually the same as the (prefix) version, but placing it after gives it a different meaning: X++.
(ternary) There’s only one of these, so it’s actually called the ternary but it means "three operands": X ? Y : Z.

#MATH OPERATORS

These are your basic math operations, plus I put () in with these since it calls a function and is close to a "math"
operation.
() Function call.
* (binary) multiply.
/ divide.
+ (binary) addition.
+ (unary) positive number.
++ (postﬁx) read, then increment.
++ (preﬁx) increment, then read.
−− (postﬁx) read, then decrement.
−− (preﬁx) decrement, then read.
- (binary) subtract.
- (unary) negative number.

#DATA OPERATORS

These are used to access data in different ways and forms.
-> struct pointer access.
. struct value access.
[] Array index.
sizeof size of a type or variable.
& (unary) Address of.
* (unary) Value of.

#LOGIC OPERATORS

These handle testing equality and inequality of variables.
!= does not equal.
< less than.
<= less than or equal.
== equal (not assignment).
> greater than.
>= greater than or equal.

#BIT OPERATORS

These are more advanced and for shifting and modifying the raw bits in integers.
& (binary) Bitwise and.
<< Shift left.
>> Shift right.
ˆ bitwise xor (exclusive or).
| bitwise or.
~ compliment (ﬂips all the bits).

#BOOLEAN OPERATORS

Used in truth testing. Study the ternary operator carefully, it is very handy.
! not.
&& and.
|| or.
?: Ternary truth test, read X ? Y : Z as "if X then Y else Z".

#ASSIGNMENT OPERATORS

Compound assignment operators that assign a value, and/or perform an operation at the same time. Most of the
above operations can also be combined into a compound assignment operator.
= assign.
%= modulus assign.
&= bitwise and assign.
*= multiply assign.
+= plus assign.
-= minus assign.
/= divide assign.
<<= shift left, assign.
>>= shift right, assign.
ˆ= bitwise xor, assign.
|= bitwise or, assign.

#AVAILABLE CONTROL STRUCTURES

There’s a few control structures you haven’t encountered yet:
do-while do { ... } while(X); First does the code in the block, then tests the X expression before exiting.
break Put this in a loop, and it breaks out ending it early.
continue Stops the body of a loop and jumps to the test so it can continue.
goto Jumps to a spot in the code where you’ve placed a label:, and you’ve been using this in the dbg.h macros
to go to the error: label.
